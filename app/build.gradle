apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.google.gms.google-services'
jacoco {
    toolVersion = "0.8.4"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "ch.epfl.sdp"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //RecyclerView
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    //firebase
    implementation 'com.firebaseui:firebase-ui-auth:6.2.0'
    implementation 'com.google.firebase:firebase-auth:19.3.0'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation 'com.firebase:firebase-client-android:2.5.0'
    implementation 'com.google.firebase:firebase-database:19.2.1'
    //test
    testImplementation 'androidx.test:core:1.2.0'
    // Optional -- Mockito framework
//    testImplementation 'org.mockito:mockito-core:2.23.4'
//    androidTestImplementation "org.mockito:mockito-core:2.23.4"
//    androidTestImplementation "com.google.dexmaker:dexmaker:1.2"
//    androidTestImplementation "com.google.dexmaker:dexmaker-mockito:1.2"
//    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
//    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
//    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.6'
//    implementation 'org.powermock:powermock-module-junit4:2.0.0'
//    implementation 'org.mockito:mockito-android:2.23.4'
//    androidTestImplementation 'org.mockito:mockito-android:2.23.4'
//    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.2'
//    testImplementation 'org.powermock:powermock-mockito-release-full:1.6.4'
//    testImplementation 'org.powermock:powermock-core:2.0.0'
//    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
//    testImplementation 'org.powermock:powermock-api-mockito2:1.7.1'
//    testImplementation "org.powermock:powermock-classloading-xstream:1.6.6"
//    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
//    testImplementation 'org.powermock:powermock-api-mockito2:1.7.1'
//    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.10.19'
//    testImplementation group: 'org.powermock', name: 'powermock-mockito-release-full', version: '1.6.4', ext: 'pom'
//    implementation 'org.powermock:powermock-mockito-release-full:1.6.4'
    //CLoudFireSTore
    implementation 'com.google.firebase:firebase-firestore:21.4.1'
    //Mockito framework
    androidTestImplementation "org.mockito:mockito-android:2.25.0"

}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().from(files([mainSrc]))
    getClassDirectories().from(files([debugTree]))
    getExecutionData().from(fileTree(dir: project.buildDir, includes: [
            'outputs/code_coverage/debugAndroidTest/connected/*coverage.ec',
            'jacoco/testDebugUnitTest.exec'
    ]))
}
